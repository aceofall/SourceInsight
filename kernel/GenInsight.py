#!/usr/bin/env python
"""
GenInsight

GenInsight creats source lists for Source Insight (encoding ANSI)
"""

__author__ = "JungHee Son (aceofall\x40naver\x2Ecom)"
__copyright__ = "Copyright 2014 JungHee Son. See LISENSE for details."
__date__ = "2014/07/08"
__version__ = "0.0.1"
__usage__ = """Usage: GenInsight.py [-D] [-R] [-S] [-V] [-f reffile] [-i srclistfile] [files ...]
-D              Dump the (C)oncrete (S)yntax (T)ree generated by the parser for each file
-R              Recurse directories for files
-S              Interpret simple strings as symbols
-V              Print version and exit
-f reffile      Use 'reffile' as cross-ref file name instead of 'cscope.out'
-i srclistfile  Use the contents of 'srclistfile' as the list of source files to scan"""

import os, sys, getopt, re, subprocess

outfilename = "SourceInsightFiles.txt"
cscope_files = "cscope.files"

def convertUnix(convertItem):
  print "=== Unix platform  ==="

  count = 1
  commented_files = []
  readed_line = convertItem.readline()[2:-1]

  while readed_line != '':
    commented_files.append(readed_line)
    print "%s : " % count + readed_line
    dirname = os.path.dirname(readed_line)
    print "%s : dirname: %s \n" % (count, dirname)
    os.system('mkdir -p AnsiConverted/%s' % dirname)
    os.system('iconv -c -f utf-8 -t euc-kr %s -o AnsiConverted/%s' % (readed_line, readed_line))
    readed_line = convertItem.readline()[2:-1]
    count += 1

  f = open(cscope_files,'r')
  w = open(outfilename,'w')

  while 1:
    line = f.readline()
    findFlag = 0

    if not line:
      break

    for checkfile in commented_files:
      if checkfile in line:
        findFlag = 1
        break

    if findFlag == 1:
      w.write("AnsiConverted/" + checkfile+"\n")
    else:
      w.write(line)

  f.close()
  w.close()

def convertWin32(convertItem):
  print "=== Win32 platform  ==="
  pwd = os.getcwd()
  os.system('rm -rf AnsiConverted\\')

  count = 1
  commented_files = []
  readed_line = convertItem.readline()[2:-1].replace("/", "\\")

  while readed_line != '':
    commented_files.append(readed_line)
    print "%s : " % count + readed_line
    dirname = os.path.dirname(readed_line)
    print "%s : dirname: %s \n" % (count, dirname)
    if (os.path.lexists('AnsiConverted\%s' % dirname) != True):
        os.system('mkdir AnsiConverted\%s' % dirname)
    os.system('iconv -c -f utf-8 -t euc-kr %s > AnsiConverted\%s' % (readed_line, readed_line))
    readed_line = convertItem.readline()[2:-1].replace("/", "\\")
    count += 1

  f = open(cscope_files,'r')
  w = open(outfilename,'w')

  while 1:
    line = f.readline().replace("/", "\\")
    findFlag = 0

    if not line:
      break

    for checkfile in commented_files:
      if checkfile in line:
        findFlag = 1
        break

    if findFlag == 1:
      w.write(pwd + "\\AnsiConverted\\" + checkfile+"\n")
    else:
      w.write(line)

  while 1:
    line = f.readline().replace("/", "\\")
    findFlag = 0

    if not line:
      break

    for checkfile in commented_files:
      if checkfile in line:
        findFlag = 1
        break

    if findFlag == 0:
      w.write(pwd + "\\AnsiConverted\\" + checkfile+"\n")

  f.close()
  w.close()

def main(argv=None):
  """Parse to convert file type ANSI from UTF-8
  """

  if argv is None:
    argv = sys.argv

  argv = sys.argv
  #os.system('fgrep -rl --exclude-dir=.git \
  #                     --exclude-dir=Reference \
  #                     --exclude-dir=AnsiConverted \
  #                     --exclude=tags \
  #                     --exclude=\*.py "ARM10C" .\
  #                     | tee modi_files.txt')

  #(dummy, stdout) = os.popen4('fgrep -rl --exclude-dir=.git \
  #                                     --exclude-dir=Reference \
  #                                     --exclude-dir=AnsiConverted \
  #                                     --exclude=tags \
  #                                     --exclude=\*.py "ARM10C" .')

  print "=== Start find ARM10C comments ==="

  stdout_pipe = subprocess.Popen('fgrep -rl --exclude-dir=.git \
                                       --exclude-dir=Reference \
                                       --exclude-dir=AnsiConverted \
                                       --exclude=tags \
                                       --exclude=\*.py "ARM10C" .', \
                                       shell=True, stdout=subprocess.PIPE)
  stdout = stdout_pipe.stdout

  print "=== Start to convert encoding from UTF-8 to ANSI ==="
  if sys.platform == "win32":
    # Windows
    convertWin32(stdout)
  else:
    # Linux or Mac
    convertUnix(stdout)


"""
  # Parse the command line arguments
  try:
    opts, args = getopt.getopt(argv[1:], "DRSVf:i:")
  except getopt.GetoptError:
    print(__usage__)
  return 2

  debug = False
  recurse = False
  indexfn = "cscope.out"

  for o, a in opts:
    if o == "-D":
      debug = True
    if o == "-R":
      recurse = True
    if o == "-S":
      strings_as_symbols = True
    if o == "-V":
      # Print version and exit.
      print("pycscope.py: Version %s" % __version__)
      return 0
    if o == "-f":
      indexfn = a
    if o == "-i":
      args.extend(list(map(string.rstrip, open(a, 'r').readlines())))
"""

if __name__ == "__main__":
  sys.exit(main())
